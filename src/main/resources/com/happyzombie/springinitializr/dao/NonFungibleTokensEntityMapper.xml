<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.happyzombie.springinitializr.dao.NonFungibleTokensEntityMapper">
  <resultMap id="BaseResultMap" type="com.happyzombie.springinitializr.bean.entity.NonFungibleTokensEntity">
    <constructor>
      <idArg column="account_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="symbol" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="base_uri" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="reference" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="reference_hash" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.happyzombie.springinitializr.bean.entity.NonFungibleTokensEntityWithBLOBs">
    <constructor>
      <idArg column="account_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="symbol" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="base_uri" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="reference" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="reference_hash" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="spec" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
      <arg column="icon" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    account_id, symbol, name, base_uri, reference, reference_hash
  </sql>
  <sql id="Blob_Column_List">
    spec, icon
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from non_fungible_tokens
    where account_id = #{accountId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from non_fungible_tokens
    where account_id = #{accountId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.happyzombie.springinitializr.bean.entity.NonFungibleTokensEntityWithBLOBs">
    insert into non_fungible_tokens (account_id, symbol, name, 
      base_uri, reference, reference_hash, 
      spec, icon)
    values (#{accountId,jdbcType=VARCHAR}, #{symbol,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{baseUri,jdbcType=VARCHAR}, #{reference,jdbcType=VARCHAR}, #{referenceHash,jdbcType=VARCHAR}, 
      #{spec,jdbcType=LONGVARCHAR}, #{icon,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.happyzombie.springinitializr.bean.entity.NonFungibleTokensEntityWithBLOBs">
    insert into non_fungible_tokens
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        account_id,
      </if>
      <if test="symbol != null">
        symbol,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="baseUri != null">
        base_uri,
      </if>
      <if test="reference != null">
        reference,
      </if>
      <if test="referenceHash != null">
        reference_hash,
      </if>
      <if test="spec != null">
        spec,
      </if>
      <if test="icon != null">
        icon,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="symbol != null">
        #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="baseUri != null">
        #{baseUri,jdbcType=VARCHAR},
      </if>
      <if test="reference != null">
        #{reference,jdbcType=VARCHAR},
      </if>
      <if test="referenceHash != null">
        #{referenceHash,jdbcType=VARCHAR},
      </if>
      <if test="spec != null">
        #{spec,jdbcType=LONGVARCHAR},
      </if>
      <if test="icon != null">
        #{icon,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.happyzombie.springinitializr.bean.entity.NonFungibleTokensEntityWithBLOBs">
    update non_fungible_tokens
    <set>
      <if test="symbol != null">
        symbol = #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="baseUri != null">
        base_uri = #{baseUri,jdbcType=VARCHAR},
      </if>
      <if test="reference != null">
        reference = #{reference,jdbcType=VARCHAR},
      </if>
      <if test="referenceHash != null">
        reference_hash = #{referenceHash,jdbcType=VARCHAR},
      </if>
      <if test="spec != null">
        spec = #{spec,jdbcType=LONGVARCHAR},
      </if>
      <if test="icon != null">
        icon = #{icon,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where account_id = #{accountId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.happyzombie.springinitializr.bean.entity.NonFungibleTokensEntityWithBLOBs">
    update non_fungible_tokens
    set symbol = #{symbol,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      base_uri = #{baseUri,jdbcType=VARCHAR},
      reference = #{reference,jdbcType=VARCHAR},
      reference_hash = #{referenceHash,jdbcType=VARCHAR},
      spec = #{spec,jdbcType=LONGVARCHAR},
      icon = #{icon,jdbcType=LONGVARCHAR}
    where account_id = #{accountId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.happyzombie.springinitializr.bean.entity.NonFungibleTokensEntity">
    update non_fungible_tokens
    set symbol = #{symbol,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      base_uri = #{baseUri,jdbcType=VARCHAR},
      reference = #{reference,jdbcType=VARCHAR},
      reference_hash = #{referenceHash,jdbcType=VARCHAR}
    where account_id = #{accountId,jdbcType=VARCHAR}
  </update>
</mapper>