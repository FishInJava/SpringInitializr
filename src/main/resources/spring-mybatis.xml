<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 引入配置文件 -->
    <context:property-placeholder location="classpath:application.properties"/>

    <!-- 1.连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${spring.datasource.url}"/>
        <property name="username" value="${spring.datasource.username}"/>
        <property name="password" value="${spring.datasource.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="2"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="2"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="30000"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>
        <property name="filters" value="mergeStat"/>
    </bean>

    <!-- 2.事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 3.sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/happyzombie/springinitializr/dao/*.xml"/>
    </bean>

    <!-- 4.Mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.happyzombie.springinitializr.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--    &lt;!&ndash; 声明式 Spring AOP的方式实现事务管理 &ndash;&gt;-->
    <!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
    <!--        <tx:attributes>-->
    <!--            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>-->
    <!--            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>-->
    <!--            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>-->
    <!--            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>-->
    <!--            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />-->
    <!--            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>-->
    <!--            <tx:method name="add**" propagation="REQUIRED" rollback-for="Exception"/>-->
    <!--            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>-->
    <!--            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>-->
    <!--            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>-->
    <!--            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>-->
    <!--        </tx:attributes>-->
    <!--    </tx:advice>-->

    <!--    &lt;!&ndash; 第一个*表示返回值，第二个*表示impl下class，第三个*表示方法名，（..）表示方法参数 &ndash;&gt;-->
    <!--    <aop:config>-->
    <!--        <aop:advisor advice-ref="txAdvice" pointcut="execution(* org.hbserver.service.*.*(..))"/>-->
    <!--    </aop:config>-->

</beans>